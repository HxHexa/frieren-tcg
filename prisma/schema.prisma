// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Player {
  id           Int           @id @default(autoincrement())
  discordId    String        @unique
  achievements Achievement[] @relation("PlayerAchievements")

  matchesAsWinner    Match[]            @relation("Winner")
  matchesAsLoser     Match[]            @relation("Loser")
  characterMasteries CharacterMastery[] @relation("PlayerCharacterMastery")
  ladderRanks        LadderRank[]       @relation("PlayerLadderRank")

  preferences PlayerPreferences?
}

model PlayerPreferences {
  id       Int    @id @default(autoincrement())
  playerId Int    @unique
  player   Player @relation(fields: [playerId], references: [id])

  tcgTextSpeed        Int         @default(1500)
  tcgLiteMode         Boolean     @default(false)
  favouriteCharacters Character[] @relation("PlayerFavouriteCharacters")
  dislikedCharacters  Character[] @relation("PlayerDislikedCharacters")
}

model LadderRank {
  id            Int         @id @default(autoincrement())
  playerId      Int
  player        Player      @relation("PlayerLadderRank", fields: [playerId], references: [id])
  ladderResetId Int
  ladderReset   LadderReset @relation(fields: [ladderResetId], references: [id])

  rankPoints Int @default(0)

  @@unique([ladderResetId, playerId])
}

model Achievement {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?  @db.Text()
  earners     Player[] @relation("PlayerAchievements")
}

model Ladder {
  id   Int    @id @default(autoincrement())
  name String @unique

  resets LadderReset[] // a snapshot of the ladder 
}

model LadderReset {
  id       Int    @id @default(autoincrement())
  ladderId Int
  ladder   Ladder @relation(fields: [ladderId], references: [id])

  startDate DateTime  @default(now())
  endDate   DateTime?

  matches     Match[]
  ladderRanks LadderRank[]
}

model Match {
  id       Int    @id @default(autoincrement())
  threadId String @default("")

  ladderResetId Int
  ladderReset   LadderReset @relation(fields: [ladderResetId], references: [id])

  winnerId          Int
  winner            Player    @relation("Winner", fields: [winnerId], references: [id])
  winnerCharacterId Int
  winnerCharacter   Character @relation("WinnerCharacter", fields: [winnerCharacterId], references: [id])

  loserId          Int
  loser            Player    @relation("Loser", fields: [loserId], references: [id])
  loserCharacterId Int
  loserCharacter   Character @relation("LoserCharacter", fields: [loserCharacterId], references: [id])

  finishedAt DateTime @default(now())
}

model Character {
  id   Int    @id @default(autoincrement())
  name String @unique

  characterMasteries CharacterMastery[] @relation("CharacterMastery")
  winnerMatches      Match[]            @relation("WinnerCharacter")
  loserMatches       Match[]            @relation("LoserCharacter")

  favouritedByPlayers PlayerPreferences[] @relation("PlayerFavouriteCharacters")
  dislikedByPlayers   PlayerPreferences[] @relation("PlayerDislikedCharacters")
}

model CharacterMastery {
  id          Int       @id @default(autoincrement())
  playerId    Int
  player      Player    @relation("PlayerCharacterMastery", fields: [playerId], references: [id])
  characterId Int
  character   Character @relation("CharacterMastery", fields: [characterId], references: [id])

  masteryPoints Int @default(0)
  wins          Int @default(0)
  losses        Int @default(0)

  @@unique([playerId, characterId])
}

model AdminSettings {
  id                         Int     @id @default(autoincrement())
  dislikedCharactersEnabled  Boolean @default(true)
  maxDislikedCharacters      Int     @default(3)
}
